# app.py
# -*- coding: utf-8 -*-
import os
import datetime
import sqlite3
import warnings
from dotenv import load_dotenv
from flask import Flask, render_template, request, redirect, url_for, send_from_directory, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_httpauth import HTTPBasicAuth
from werkzeug.utils import secure_filename
from ldap3 import Server, Connection, ALL, NTLM, SIMPLE
from sqlalchemy import func, desc
from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship
from flask import abort
from flask_socketio import SocketIO, emit, join_room, leave_room
from flask import copy_current_request_context

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
warnings.filterwarnings("ignore", category=DeprecationWarning)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

app = Flask(__name__)
app.config.update(
    SECRET_KEY=os.getenv('SECRET_KEY', 'supersecretkey'),
    SESSION_COOKIE_SECURE=False,  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    SESSION_COOKIE_SAMESITE='Lax',
    SQLALCHEMY_DATABASE_URI=os.getenv('DATABASE_URI', 'sqlite:///social.db'),
    SQLALCHEMY_TRACK_MODIFICATIONS=False,
    UPLOAD_FOLDER=os.getenv('UPLOAD_FOLDER', 'uploads'),
    MAX_CONTENT_LENGTH=int(os.getenv('MAX_FILE_SIZE', 16 * 1024 * 1024)),
    FILE_LIFETIME=int(os.getenv('FILE_LIFETIME', 7)),
    # LDAP Configuration
    LDAP_SERVER=os.getenv('LDAP_SERVER'),
    LDAP_DOMAIN=os.getenv('LDAP_DOMAIN'),
    LDAP_SEARCH_BASE=os.getenv('LDAP_SEARCH_BASE'),
    LDAP_USER_OU=os.getenv('LDAP_USER_OU'),
    LDAP_ADMIN_GROUP=os.getenv('LDAP_ADMIN_GROUP'),
    LDAP_SERVICE_ACCOUNT=os.getenv('LDAP_SERVICE_ACCOUNT'),
    LDAP_SERVICE_PASSWORD=os.getenv('LDAP_SERVICE_PASSWORD'),
)

db = SQLAlchemy(app)
auth = HTTPBasicAuth()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SocketIO —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
socketio = SocketIO(
    app,
    async_mode='eventlet',
    cors_allowed_origins="*",
    logger=True,
    engineio_logger=True,
    ping_timeout=300,
    ping_interval=60,
    max_http_buffer_size=100 * 1024 * 1024,  # 100MB –¥–ª—è —Ñ–∞–π–ª–æ–≤
    manage_session=False  # –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)


# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    fullname = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120))
    department = db.Column(db.String(120))
    position = db.Column(db.String(120))
    is_active = db.Column(db.Boolean, default=True)
    last_seen = db.Column(db.DateTime, default=datetime.datetime.utcnow)
    password_hash = db.Column(db.String(128), default='')

    def unread_messages_count(self):
        return Message.query.filter_by(
            recipient_id=self.id,
            is_read=False
        ).count()


class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, index=True, default=datetime.datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('posts', lazy=True))


class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=True)
    timestamp = db.Column(db.DateTime, index=True, default=datetime.datetime.utcnow)
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    recipient_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    is_read = db.Column(db.Boolean, default=False)
    files = db.relationship('File', backref='message', lazy=True)
    sender = db.relationship('User', foreign_keys=[sender_id], backref=db.backref('sent_messages', lazy=True))
    recipient = db.relationship('User', foreign_keys=[recipient_id], backref=db.backref('received_messages', lazy=True))


class File(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(255), nullable=False)
    upload_date = db.Column(db.DateTime, default=datetime.datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    message_id = db.Column(db.Integer, db.ForeignKey('message.id'), nullable=True)
    filesize = db.Column(db.BigInteger, default=0)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    user = db.relationship('User', backref=db.backref('files', lazy=True))

    @property
    def filepath(self):
        return os.path.join(app.config['UPLOAD_FOLDER'], self.filename)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}  # user_id: sid


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞
def get_chat_room_name(user1_id, user2_id):
    sorted_ids = sorted([user1_id, user2_id])
    return f"chat_{sorted_ids[0]}_{sorted_ids[1]}"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket
@socketio.on('connect')
def handle_connect(auth=None):  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä auth
    print(f"‚ö°Ô∏è –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}")
    if 'user_id' in session:
        user_id = session['user_id']
        active_users[user_id] = request.sid
        join_room(f"user_{user_id}")  # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–∫–ª—é—á–µ–Ω. SID: {request.sid}")
        emit('connection_success', {'message': '–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket'})

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        update_online_users()
    else:
        print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        emit('reconnect_required', {'reason': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'})


@socketio.on('disconnect')
def handle_disconnect():
    print(f"‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {request.sid}")
    if 'user_id' in session:
        user_id = session['user_id']
        if user_id in active_users:
            del active_users[user_id]
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–µ–Ω")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        update_online_users()


@socketio.on('join_chat')
def handle_join_chat(data):
    if 'user_id' not in session:
        print("üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É –±–µ–∑ —Å–µ—Å—Å–∏–∏")
        emit('error', {'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'})
        return

    user_id = session['user_id']
    recipient_id = data['recipient_id']
    room = get_chat_room_name(user_id, recipient_id)
    join_room(room)
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞: {room}")
    emit('room_joined', {'room': room})


@socketio.on('send_message')
def handle_send_message(data):
    print(f"‚úâÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
    try:
        if 'user_id' not in session:
            print("üö´ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–µ—Å—Å–∏–∏")
            emit('error', {'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'}, room=request.sid)
            return

        user_id = session['user_id']
        recipient_id = data['recipient_id']
        content = data['content'].strip()

        if not content:
            print("‚ö™Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        print(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –¥–ª—è {recipient_id}: {content[:50]}...")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        message = Message(
            content=content,
            sender_id=user_id,
            recipient_id=recipient_id,
            is_read=False
        )
        db.session.add(message)
        db.session.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –ë–î, ID: {message.id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—É
        room = get_chat_room_name(user_id, recipient_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender = User.query.get(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        message_data = {
            'id': message.id,
            'sender_id': user_id,
            'recipient_id': recipient_id,
            'sender_name': sender.fullname,
            'content': content,
            'timestamp': datetime.datetime.utcnow().isoformat() + 'Z',  # –î–æ–±–∞–≤–ª—è–µ–º 'Z' –¥–ª—è UTC
            'room': room,
            'is_read': False,
            'files': []
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
        emit('new_message', message_data, room=room)
        print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç—É: {room}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        notification_data = {
            'sender_id': user_id,
            'sender_name': sender.fullname,
            'content': content,
            'room': room,
            'message_id': message.id,
            'recipient_id': recipient_id,
            'timestamp': datetime.datetime.utcnow().isoformat() + 'Z'
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
        if recipient_id in active_users:
            emit('new_message_notification', notification_data, room=f"user_{recipient_id}")
            print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        else:
            print(f"üîï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_id} –Ω–µ –≤ —Å–µ—Ç–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        emit('message_delivered', {
            'message_id': message.id,
            'timestamp': datetime.datetime.utcnow().isoformat() + 'Z'
        }, room=request.sid)

        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        import traceback
        traceback.print_exc()
        emit('error', {'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}, room=request.sid)


def init_database():
    with app.app_context():
        db.create_all()
        inspector = db.inspect(db.engine)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
        tables = {
            'message': ['is_read'],
            'file': ['message_id', 'filesize']
        }

        for table_name, columns in tables.items():
            if table_name in inspector.get_table_names():
                existing_columns = [col['name'] for col in inspector.get_columns(table_name)]
                for column in columns:
                    if column not in existing_columns:
                        try:
                            with db.engine.begin() as connection:
                                if column == 'is_read':
                                    connection.execute(
                                        f"ALTER TABLE {table_name} ADD COLUMN {column} BOOLEAN DEFAULT 0")
                                elif column == 'filesize':
                                    connection.execute(f"ALTER TABLE {table_name} ADD COLUMN {column} BIGINT DEFAULT 0")
                                else:
                                    connection.execute(f"ALTER TABLE {table_name} ADD COLUMN {column} INTEGER")
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {column} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ {column}: {str(e)}")

        print("üõ¢Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def update_online_users():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    online_user_ids = list(active_users.keys())
    online_users = User.query.filter(User.id.in_(online_user_ids)).all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    users_data = [{
        'id': user.id,
        'username': user.username,
        'fullname': user.fullname
    } for user in online_users]

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    socketio.emit('online_users_update', {'users': users_data}, namespace='/')
    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(online_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@app.context_processor
def inject_common_data():
    common = {
        'now': datetime.datetime.utcnow(),
        'current_year': datetime.datetime.utcnow().year
    }

    if 'user_id' in session:
        user = User.query.get(session['user_id'])
        common['current_user'] = user
        common['unread_messages_count'] = user.unread_messages_count() if user else 0

    return common


# LDAP Helper Functions
def get_ldap_connection(username=None, password=None, service_auth=False):
    server = Server(
        app.config['LDAP_SERVER'],
        get_info=ALL,
        connect_timeout=5
    )

    if service_auth:
        username = app.config['LDAP_SERVICE_ACCOUNT']
        password = app.config['LDAP_SERVICE_PASSWORD']

        formats = [
            f"{username}@{app.config['LDAP_DOMAIN']}",
            f"{app.config['LDAP_DOMAIN']}\\{username}",
            f"CN={username},{app.config['LDAP_USER_OU']}"
        ]

        for user_dn in formats:
            try:
                conn = Connection(
                    server,
                    user=user_dn,
                    password=password,
                    authentication=NTLM,
                    auto_bind=True
                )
                if conn.bound:
                    return conn
            except Exception:
                continue

        for user_dn in formats:
            try:
                conn = Connection(
                    server,
                    user=user_dn,
                    password=password,
                    authentication=SIMPLE,
                    auto_bind=True
                )
                if conn.bound:
                    return conn
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIMPLE –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")

        raise Exception("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å")
    else:
        user_dn = f"{username}@{app.config['LDAP_DOMAIN']}"
        try:
            return Connection(
                server,
                user=user_dn,
                password=password,
                authentication=NTLM,
                auto_bind=True
            )
        except Exception:
            try:
                return Connection(
                    server,
                    user=user_dn,
                    password=password,
                    authentication=SIMPLE,
                    auto_bind=True
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
                return None


def get_user_ldap_attributes(username, attributes):
    try:
        conn = get_ldap_connection(service_auth=True)
        search_filter = f"(sAMAccountName={username})"
        conn.search(
            app.config['LDAP_SEARCH_BASE'],
            search_filter,
            attributes=attributes
        )
        if conn.entries:
            return conn.entries[0]
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ LDAP: {str(e)}")
        return None


def is_user_in_group(username, group_dn):
    try:
        user_attrs = get_user_ldap_attributes(username, ['distinguishedName'])
        if not user_attrs or not hasattr(user_attrs, 'distinguishedName'):
            return False

        user_dn = user_attrs.distinguishedName.value

        conn = get_ldap_connection(service_auth=True)
        search_filter = f"(&(objectClass=group)(distinguishedName={group_dn})(member={user_dn}))"
        conn.search(
            app.config['LDAP_SEARCH_BASE'],
            search_filter,
            attributes=['cn']
        )
        return bool(conn.entries)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–ø–ø—ã LDAP: {str(e)}")
        return False


@auth.verify_password
def verify_password(username, password):
    try:
        conn = get_ldap_connection(username, password)
        if not conn or not conn.bound:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LDAP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            return None

        ldap_user = get_user_ldap_attributes(username,
                                             ['displayName', 'mail', 'department', 'title'])

        if not ldap_user:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ LDAP")
            return None

        user = User.query.filter_by(username=username).first()
        if not user:
            user = User(username=username)
            db.session.add(user)

        user.fullname = getattr(ldap_user, 'displayName', username)
        user.email = getattr(ldap_user, 'mail', '')
        user.department = getattr(ldap_user, 'department', '')
        user.position = getattr(ldap_user, 'title', '')
        user.is_active = True
        user.last_seen = datetime.datetime.utcnow()

        db.session.commit()

        session['user_id'] = user.id
        session['is_admin'] = is_user_in_group(username, app.config['LDAP_ADMIN_GROUP'])

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {username}")
        return username
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return None


@app.cli.command('sync-ad')
def sync_ad_users():
    try:
        with app.app_context():
            conn = get_ldap_connection(service_auth=True)
            conn.search(
                app.config['LDAP_USER_OU'],
                '(objectClass=user)',
                attributes=['sAMAccountName', 'displayName', 'mail', 'department', 'title']
            )

            active_users = []
            for entry in conn.entries:
                username = entry.sAMAccountName.value
                active_users.append(username)

                user = User.query.filter_by(username=username).first()
                if not user:
                    user = User(username=username)
                    db.session.add(user)

                user.fullname = entry.displayName.value
                user.email = entry.mail.value if 'mail' in entry and entry.mail.value else ''
                user.department = entry.department.value if 'department' in entry and entry.department.value else ''
                user.position = entry.title.value if 'title' in entry and entry.title.value else ''
                user.is_active = True

            inactive_users = User.query.filter(User.username.notin_(active_users)).all()
            for user in inactive_users:
                user.is_active = False

            db.session.commit()
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")
        db.session.rollback()


def cleanup_old_files():
    with app.app_context():
        expiration = datetime.datetime.utcnow() - datetime.timedelta(days=app.config['FILE_LIFETIME'])
        old_files = File.query.filter(File.upload_date < expiration).all()

        deleted_count = 0
        for file in old_files:
            try:
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
                if os.path.exists(file_path):
                    os.remove(file_path)
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file.filename}")
                db.session.delete(file)
                deleted_count += 1
            except OSError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}")

        db.session.commit()
        print(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")


@app.template_filter('filesizeformat')
def filesizeformat_filter(value):
    if value is None or value == 0:
        return "0 B"

    for unit in ['B', 'KB', 'MB', 'GB']:
        if abs(value) < 1024.0:
            return f"{value:.1f} {unit}"
        value /= 1024.0
    return f"{value:.1f} TB"


@app.route('/')
@auth.login_required
def index():
    posts = Post.query.order_by(Post.timestamp.desc()).all()
    return render_template('index.html', posts=posts)


@app.route('/post', methods=['POST'])
@auth.login_required
def create_post():
    content = request.form.get('content')
    if content:
        post = Post(content=content, user_id=session['user_id'])
        db.session.add(post)
        db.session.commit()
    return redirect(url_for('index'))


@app.route('/users')
@auth.login_required
def users():
    user_list = User.query.filter_by(is_active=True).all()
    return render_template('users.html', users=user_list)


@app.route('/profile/<username>')
@auth.login_required
def user_profile(username):
    user = User.query.filter_by(username=username, is_active=True).first_or_404()
    return render_template('profile.html', profile_user=user)


@app.route('/chat/<int:user_id>', methods=['GET', 'POST'])
@auth.login_required
def chat(user_id):
    recipient = User.query.get_or_404(user_id)

    # –ü–æ–º–µ—á–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    unread_messages = Message.query.filter_by(
        sender_id=user_id,
        recipient_id=session['user_id'],
        is_read=False
    ).all()

    for msg in unread_messages:
        msg.is_read = True

    db.session.commit()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    messages = Message.query.filter(
        ((Message.sender_id == session['user_id']) & (Message.recipient_id == user_id)) |
        ((Message.sender_id == user_id) & (Message.recipient_id == session['user_id']))
    ).order_by(Message.timestamp.asc()).all()

    return render_template('chat.html', recipient=recipient, messages=messages)


@app.route('/chat/history/<int:recipient_id>', methods=['GET'])
@auth.login_required
def chat_history(recipient_id):
    print(f"üìú –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {session['user_id']} —Å {recipient_id}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    messages = Message.query.filter(
        ((Message.sender_id == session['user_id']) & (Message.recipient_id == recipient_id)) |
        ((Message.sender_id == recipient_id) & (Message.recipient_id == session['user_id']))
    ).order_by(Message.timestamp.desc()).limit(100).all()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è JSON
    result = []
    for msg in messages:
        message_data = {
            'id': msg.id,
            'content': msg.content,
            'timestamp': msg.timestamp.isoformat() + 'Z',  # –î–æ–±–∞–≤–ª—è–µ–º 'Z' –¥–ª—è UTC
            'sender_id': msg.sender_id,
            'sender_name': msg.sender.fullname,
            'is_read': msg.is_read,
            'files': [{
                'id': f.id,
                'filename': f.filename,
                'filesize': f.filesize
            } for f in msg.files]
        }
        result.append(message_data)

    print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(result)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    return jsonify(result[::-1])  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –ø–µ—Ä–≤—ã–º–∏


@app.route('/inbox')
@auth.login_required
def inbox():
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
    sent_to = db.session.query(
        Message.recipient_id
    ).filter(
        Message.sender_id == session['user_id']
    ).distinct()

    received_from = db.session.query(
        Message.sender_id
    ).filter(
        Message.recipient_id == session['user_id']
    ).distinct()

    all_user_ids = {id for (id,) in sent_to} | {id for (id,) in received_from}

    conversations = []
    unread_counts = {}

    for user_id in all_user_ids:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        last_message = Message.query.filter(
            ((Message.sender_id == session['user_id']) & (Message.recipient_id == user_id)) |
            ((Message.sender_id == user_id) & (Message.recipient_id == session['user_id']))
        ).order_by(Message.timestamp.desc()).first()

        if last_message:
            user = User.query.get(user_id)
            conversations.append((last_message, user))

            # –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            count = Message.query.filter_by(
                sender_id=user_id,
                recipient_id=session['user_id'],
                is_read=False
            ).count()
            unread_counts[user_id] = count

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    conversations.sort(key=lambda x: x[0].timestamp, reverse=True)

    return render_template('inbox.html', conversations=conversations, unread_counts=unread_counts)


@app.route('/upload/<int:recipient_id>', methods=['POST'])
@auth.login_required
def upload_file(recipient_id):
    """–û—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç–µ"""
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)
    filesize = os.path.getsize(filepath)

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
    message = Message(
        content=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {filename}",
        sender_id=session['user_id'],
        recipient_id=recipient_id,
        is_read=False
    )
    db.session.add(message)
    db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    new_file = File(
        filename=filename,
        user_id=session['user_id'],
        message_id=message.id,
        filesize=filesize
    )
    db.session.add(new_file)
    db.session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ
    room = get_chat_room_name(session['user_id'], recipient_id)
    sender = User.query.get(session['user_id'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    file_data = {
        'id': message.id,
        'sender_id': session['user_id'],
        'recipient_id': recipient_id,
        'sender_name': sender.fullname,
        'content': f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {filename}",
        'timestamp': datetime.datetime.utcnow().isoformat() + 'Z',  # –î–æ–±–∞–≤–ª—è–µ–º 'Z' –¥–ª—è UTC
        'room': room,
        'is_read': False,
        'files': [{
            'id': new_file.id,
            'filename': filename,
            'filesize': filesize
        }]
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
    socketio.emit('new_message', file_data, room=room)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
    if recipient_id in active_users:
        socketio.emit('new_message_notification', {
            'sender_id': session['user_id'],
            'sender_name': sender.fullname,
            'content': f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {filename}",
            'room': room,
            'recipient_id': recipient_id,
            'timestamp': datetime.datetime.utcnow().isoformat() + 'Z'
        }, room=f"user_{recipient_id}")
        print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ñ–∞–π–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
    else:
        print(f"üîï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_id} –Ω–µ –≤ —Å–µ—Ç–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    return jsonify({
        'success': True,
        'message_id': message.id,
        'file_id': new_file.id
    })


@app.route('/download/<int:file_id>')
@auth.login_required
def download_file(file_id):
    try:
        file = File.query.get_or_404(file_id)
        message = file.message  # –°–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:
        # 1. –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ–∞–π–ª–∞
        # 2. –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è
        # 3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        allowed = False

        if file.user_id == session['user_id']:
            allowed = True  # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ñ–∞–π–ª–∞

        elif message and message.recipient_id == session['user_id']:
            allowed = True  # –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è

        elif session.get('is_admin'):
            allowed = True  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

        if not allowed:
            print(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —Ñ–∞–π–ª—É {file_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {session['user_id']}")
            return "Forbidden", 403

        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)

        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return "File not found", 404

        print(f"üì• –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: {file.filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {session['user_id']}")
        return send_from_directory(
            app.config['UPLOAD_FOLDER'],
            file.filename,
            as_attachment=True,
            download_name=file.filename
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {str(e)}")
        return "Internal server error", 500


@app.route('/mark_as_read/<int:message_id>', methods=['POST'])
@auth.login_required
def mark_as_read(message_id):
    try:
        message = Message.query.get_or_404(message_id)
        current_user_id = session['user_id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–ª—É—á–∞—Ç–µ–ª—å
        if message.recipient_id == current_user_id:
            message.is_read = True
            db.session.commit()
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user_id}")
            return jsonify({'status': 'success'})

        print(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–º–µ—Ç–∏—Ç—å —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "
              f"message_id={message_id}, recipient={message.recipient_id}, "
              f"current_user={current_user_id}")

        return jsonify({
            'status': 'error',
            'message': 'Forbidden: –í—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
        }), 403
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': 'Internal server error'
        }), 500


@app.route('/admin')
@auth.login_required
def admin_panel():
    if not session.get('is_admin'):
        return "Forbidden", 403

    users = User.query.all()
    stats = {
        'total_users': User.query.count(),
        'active_users': User.query.filter_by(is_active=True).count(),
        'total_posts': Post.query.count(),
        'total_files': File.query.count(),
        'total_messages': Message.query.count()
    }
    return render_template('admin.html', users=users, stats=stats)


@app.route('/unread_count')
@auth.login_required
def unread_count():
    count = Message.query.filter_by(
        recipient_id=session['user_id'],
        is_read=False
    ).count()
    return jsonify({'count': count})


@app.route('/send_message', methods=['POST'])
@auth.login_required
def send_message_http():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ HTTP"""
    try:
        data = request.json
        recipient_id = data['recipient_id']
        content = data['content'].strip()

        if not content:
            return jsonify({'status': 'error', 'message': 'Empty message'}), 400

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        message = Message(
            content=content,
            sender_id=session['user_id'],
            recipient_id=recipient_id,
            is_read=False
        )
        db.session.add(message)
        db.session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–Ω–∞—Ç—É
        room = get_chat_room_name(session['user_id'], recipient_id)
        sender = User.query.get(session['user_id'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        message_data = {
            'id': message.id,
            'sender_id': session['user_id'],
            'recipient_id': recipient_id,
            'sender_name': sender.fullname,
            'content': content,
            'timestamp': datetime.datetime.utcnow().isoformat() + 'Z',  # –î–æ–±–∞–≤–ª—è–µ–º 'Z' –¥–ª—è UTC
            'room': room,
            'is_read': False,
            'files': []
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
        socketio.emit('new_message', message_data, room=room)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –æ–Ω–ª–∞–π–Ω
        if recipient_id in active_users:
            socketio.emit('new_message_notification', {
                'sender_id': session['user_id'],
                'sender_name': sender.fullname,
                'content': content,
                'room': room,
                'recipient_id': recipient_id,
                'timestamp': datetime.datetime.utcnow().isoformat() + 'Z'
            }, room=f"user_{recipient_id}")
            print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
        else:
            print(f"üîï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient_id} –Ω–µ –≤ —Å–µ—Ç–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        return jsonify({
            'status': 'success',
            'message_id': message.id
        })

    except Exception as e:
        db.session.rollback()
        print(f"Error sending message: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def init_app():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    with app.app_context():
        cleanup_old_files()
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    init_app()
    socketio.run(
        app,
        host='0.0.0.0',
        port=5000,
        debug=True,
        use_reloader=False,  # –í–∞–∂–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ WebSocket
        allow_unsafe_werkzeug=True
    )